import streamlit as st
import pandas as pd
import numpy as np
import plotly.graph_objects as go
import plotly.express as px
from datetime import datetime, timedelta
import matplotlib.pyplot as plt
import matplotlib.dates as mdates
import yfinance as yf
import requests
import pickle
import joblib
import os

# Page configuration
st.set_page_config(
    page_title="Brent Oil Price Dashboard",
    page_icon="üõ¢Ô∏è",
    layout="wide"
)

# Title and description
st.title("üõ¢Ô∏è Dashboard de an√°lise do pre√ßo do petr√≥leo Brent")
st.markdown("""
Este dashboard fornece uma an√°lise abrangente dos pre√ßos do petr√≥leo Brent, incluindo:
- Tend√™ncia hist√≥rica
- Volatilidade dos pre√ßos
- Padr√µes sazonais
- Forecast do pre√ßo do pr√≥ximo dia
""")

# Function to load data
@st.cache_data
def load_data():
    # Obter dados do Brent do yfinance
    ticker = "BZ=F"  # C√≥digo do Brent 
    data = yf.download(ticker, start="2010-01-01", end=datetime.now().strftime("%Y-%m-%d"))
    # Diagn√≥stico
    if data.empty:
        st.error("‚ùå Falha ao carregar dados do Yahoo Finance")
        raw_data_link = 'https://raw.githubusercontent.com/Gervic/brent-oil-dashboard-fiap-tech-challenge-fase4/refs/heads/main/petrol_price_data.csv'
        raw_data = pd.read_csv(raw_data_link, sep=';')
        brent_data = raw_data[['Date', 'petrol_price']]
        brent_data['petrol_price'] = brent_data['petrol_price'].str.replace(',', '.').astype(float)
        st.info('Dados carregados da base hist√≥rica dispon√≠vel no Github')
        return brent_data
    else:
        return data

# Load the data
data = load_data()

# Create tabs for different visualizations
tab1, tab2, tab, tab3 = st.tabs(["Tend√™ncias do pre√ßo", "Volatilidade", "Insights", "Forecast"])

#Dicion√°rio de Eventos e Fun√ß√£o para Anota√ß√µes
# Dicion√°rio de eventos geopol√≠ticos e econ√¥micos relevantes
events = {
    '2011-03-15': {'event': 'Primavera √Årabe', 'desc': 'Revoltas no Oriente M√©dio e Norte da √Åfrica'},
    '2014-11-27': {'event': 'OPEP n√£o corta produ√ß√£o', 'desc': 'OPEP mant√©m produ√ß√£o apesar dos pre√ßos em queda'},
    '2016-01-16': {'event': 'San√ß√µes do Ir√£ removidas', 'desc': 'Fim das san√ß√µes ao Ir√£ aumenta oferta global'},
    '2016-11-30': {'event': 'Acordo OPEP', 'desc': 'OPEP concorda em cortar produ√ß√£o pela primeira vez desde 2008'},
    '2019-12-06': {'event': 'OPEP+ Cortes', 'desc': 'OPEP+ aumenta cortes de produ√ß√£o em 500.000 barris/dia'},
    '2020-03-08': {'event': 'Guerra de Pre√ßos', 'desc': 'Ar√°bia Saudita inicia guerra de pre√ßos ap√≥s falha em acordo com R√∫ssia'},
    '2020-03-11': {'event': 'Pandemia COVID-19', 'desc': 'OMS declara pandemia global'},
    '2020-04-20': {'event': 'WTI Negativo', 'desc': 'Pre√ßo do petr√≥leo WTI cai para valores negativos'},
    '2021-10-04': {'event': 'Crise Energ√©tica', 'desc': 'Escassez de g√°s natural e carv√£o eleva demanda por petr√≥leo'},
    '2022-02-24': {'event': 'Invas√£o da Ucr√¢nia', 'desc': 'R√∫ssia invade a Ucr√¢nia'},
    '2022-03-31': {'event': 'Libera√ß√£o Reservas', 'desc': 'EUA anuncia libera√ß√£o de 180 milh√µes de barris da reserva estrat√©gica'},
    '2023-04-02': {'event': 'Corte OPEP+', 'desc': 'OPEP+ anuncia corte surpresa de mais de 1 milh√£o de barris/dia'},
    '2023-10-07': {'event': 'Conflito Israel-Hamas', 'desc': 'In√≠cio do conflito entre Israel e Hamas'}
}

with tab1:
    st.header("Tend√™ncias do pre√ßo do petr√≥leo Brent")

    # Lendo e preparando os dados
    try:
        df = data['Close'].reset_index().rename(columns={'BZ=F': 'petrol_price'})
    except:
        df = data.copy()
    df['Date'] = pd.to_datetime(df['Date'])
    df = df.sort_values(by='Date')
    df = df.set_index('Date')

    st.sidebar.header('`Brent Oil Price Analytics`')
    st.sidebar.image("brent-oil-image.jpg", width=300)
    st.sidebar.info(f"Dados atualizados at√©: {df.index.max().strftime('%d/%m/%Y')}")
    ma50 = st.sidebar.slider("M√©dia m√≥vel curta (dias)", 10, 100, 50)
    ma200 = st.sidebar.slider("M√©dia m√≥vel longa (dias)", 50, 300, 200)
    
     # Selecionar tema
    st.sidebar.subheader("Configura√ß√µes")
    show_all_events = st.sidebar.checkbox("Mostrar no gr√°fico todos os eventos relevantes?", value=False)
    theme = st.sidebar.selectbox("Tema", ["Claro", "Escuro"], index=0)
    
    # Aplicando tema
    if theme == "Escuro":
        st.markdown("""
        <style>
        .stApp {
            background-color: #121212;
            color: white;
        }
        </style>
        """, unsafe_allow_html=True)
    
    # Informa√ß√µes adicionais
    with st.sidebar.expander("Sobre"):
        st.markdown("""
        **Brent Price Oil Analytics** √© uma plataforma de an√°lise e previs√£o do pre√ßo do petr√≥leo Brent.
        
        Desenvolvida para auxiliar na tomada de decis√µes estrat√©gicas baseadas em dados hist√≥ricos e tend√™ncias futuras.
        
        üìß [Contato para Suporte](email para:suporte@brent-analytics.com)
        """)

    # C√°lculos
    df['volatility_30d'] = df['petrol_price'].rolling(window=30).std()
    df['ma50'] = df['petrol_price'].rolling(window=ma50).mean()
    df['ma200'] = df['petrol_price'].rolling(window=ma200).mean()
    df['price_change'] = df['petrol_price'].diff()
    df['price_pct_change'] = df['petrol_price'].pct_change() * 100
    monthly_avg = df['petrol_price'].resample('M').mean()
    yearly_avg = df['petrol_price'].resample('Y').mean()

    st.markdown("### M√©tricas")
    col1, col2, col3, col4 = st.columns(4)
    current_price = df['petrol_price'].iloc[-1]
    prev_price = df['petrol_price'].iloc[-2]
    pct_change = (current_price - prev_price) / prev_price * 100
    vol_30d = df['volatility_30d'].iloc[-1]
    
    col1.metric("Pre√ßo Atual", f"US$ {current_price:.2f}")
    col2.metric("Pre√ßo Anterior", f"US$ {prev_price:.2f}")
    col3.metric("%DoD", f"{pct_change:.2f}%")
    col4.metric("M√©dia 30 dias", f"US$ {df['petrol_price'].tail(30).mean():.2f}")
          
    fig = go.Figure()
    # Pre√ßo do petr√≥leo
    fig.add_trace(go.Scatter(
        x=df.index,
        y=df['petrol_price'],
        mode='lines',
        name='Pre√ßo Brent (USD)',
        line=dict(color='#1f77b4', width=2)
    ))
    # Adicionando eventos importantes, se solicitado
    if show_all_events and events:
        for date, info in events.items():
            event_date = pd.to_datetime(date)
            if event_date in df.index or (event_date >= df.index[0] and event_date <= df.index[-1]):
                # Encontrar o valor y mais pr√≥ximo para o evento
                closest_date = df.index[df.index.get_indexer([event_date], method='nearest')[0]]
                y_value = df.loc[closest_date, 'petrol_price']
                
                # Adicionar anota√ß√£o do evento
                fig.add_annotation(
                    x=event_date,
                    y=y_value,
                    text=info['event'],
                    showarrow=True,
                    arrowhead=1,
                    ax=0,
                    ay=-40,
                    bgcolor="black",
                    opacity=0.8
                )
    
    # M√©dias m√≥veis
    fig.add_trace(go.Scatter(
        x=df.index,
        y=df['ma50'],
        mode='lines',
        name=f'MM{ma50}',
        line=dict(color='green', dash='dash')
    ))
    
    fig.add_trace(go.Scatter(
        x=df.index,
        y=df['ma200'],
        mode='lines',
        name=f'MM{ma200}',
        line=dict(color='red', dash='dot')
    ))

    
    # Layout
    fig.update_layout(
        title="üìâ Evolu√ß√£o dos Pre√ßos do Petr√≥leo Brent",
        xaxis_title="Data",
        yaxis_title="Pre√ßo (USD)",
        template="plotly_white",
        legend=dict(x=0, y=1),
        hovermode="x unified",
        height=600
    )
    
    # Mostrar no Streamlit
    st.plotly_chart(fig, use_container_width=True)
    st.markdown("---")


    st.markdown("""
    Este gr√°fico principal mostra a trajet√≥ria completa dos pre√ßos do petr√≥leo Brent
    ao longo de 15 anos, revelando ciclos dram√°ticos de alta e baixa:
    
    ‚óè Per√≠odo 2011-2014: Observamos um patamar elevado e relativamente
    est√°vel de pre√ßos (acima de $100), sustentado pela crescente demanda
    chinesa e pelas tens√µes geopol√≠ticas durante a Primavera √Årabe que
    reduziram a oferta da L√≠bia e geraram incertezas sobre outros produtores
    da regi√£o.
    
    ‚óè Colapso 2014-2016: Queda acentuada de pre√ßos que come√ßou quando a
    OPEP decidiu n√£o cortar produ√ß√£o em novembro de 2014, preferindo
    manter participa√ß√£o de mercado frente ao crescimento do xisto
    americano. A remo√ß√£o das san√ß√µes contra o Ir√£ em janeiro de 2016
    ampliou a oferta global, pressionando ainda mais os pre√ßos para baixo.
    
    ‚óè Recupera√ß√£o 2016-2018: Per√≠odo de estabiliza√ß√£o e recupera√ß√£o gradual
    ap√≥s o hist√≥rico Acordo da OPEP de novembro de 2016, quando o cartel
    concordou em cortar produ√ß√£o pela primeira vez desde 2008, em
    coordena√ß√£o com produtores n√£o-OPEP, como a R√∫ssia.
    
    ‚óè Choque pand√™mico 2020: O colapso mais dram√°tico da s√©rie, quando a
    conjun√ß√£o da Pandemia COVID-19 e a Guerra de Pre√ßos entre R√∫ssia e
    Ar√°bia Saudita levou a uma queda sem precedentes, chegando ao ponto
    do WTI americano registrar pre√ßos negativos em abril de 2020.
    
    ‚óè Recupera√ß√£o p√≥s-pandemia 2020-2022: Forte ascens√£o a partir de n√≠veis
    extremamente baixos, impulsionada pela reabertura econ√¥mica global,
    pela disciplina de produ√ß√£o da OPEP+ e pelos pacotes de est√≠mulo que
    fomentaram a demanda.
    
    ‚óè Crise energ√©tica e Guerra na Ucr√¢nia 2021-2022: A Invas√£o da Ucr√¢nia
    pela R√∫ssia em fevereiro de 2022 elevou os pre√ßos a patamares pr√≥ximos
    de $130, refletindo riscos de oferta do segundo maior exportador mundial.
    Anteriormente, j√° havia press√£o de alta devido √† Crise Energ√©tica que
    elevou a demanda por petr√≥leo como substituto do g√°s natural
    """)
 
    df_monthly = df.copy()
    df_monthly["month"] = df_monthly.index.month
    df_monthly["year"] = df_monthly.index.year
    
    # Boxplot da sazonalidade mensal com Plotly Express
    fig = px.box(df_monthly, x="month", y="petrol_price", points="outliers",
                 labels={"month": "M√™s", "petrol_price": "Pre√ßo (USD)"},
                 category_orders={"month": list(range(1, 13))},
                 title="Sazonalidade Mensal dos Pre√ßos do Petr√≥leo Brent (2010-2025)")
    
    # C√°lculo da m√©dia mensal
    monthly_means = df_monthly.groupby("month")["petrol_price"].mean()
    
    # Adiciona linha de m√©dias mensais
    fig.add_trace(go.Scatter(
        x=list(range(1, 13)),
        y=monthly_means.values,
        mode="lines+markers",
        line=dict(color="red", width=3),
        marker=dict(size=8),
        name="M√©dia Mensal"
    ))
    
    # Adiciona anota√ß√µes
    fig.add_annotation(
        x=12,
        y=monthly_means[12],
        text="Maior demanda por<br>aquecimento<br>Hemisf√©rio Norte",
        showarrow=True,
        arrowhead=1,
        ax=30,
        ay=-30,
        bgcolor="black"
    )
    
    fig.add_annotation(
        x=7,
        y=monthly_means[7],
        text="Temporada de<br>viagens de ver√£o<br>Hemisf√©rio Norte",
        showarrow=True,
        arrowhead=1,
        ax=50,
        ay=50,
        bgcolor="black"
    )
    
    # Customiza√ß√µes de layout
    fig.update_layout(
        xaxis=dict(
            tickmode="array",
            tickvals=list(range(1, 13)),
            ticktext=['Jan', 'Fev', 'Mar', 'Abr', 'Mai', 'Jun',
                      'Jul', 'Ago', 'Set', 'Out', 'Nov', 'Dez']
        ),
        yaxis_title="Pre√ßo (USD)",
        legend=dict(orientation="h", yanchor="bottom", y=1.02, xanchor="right", x=1),
        template="plotly_white"
    )
    
    # Mostrar no Streamlit
    st.plotly_chart(fig, use_container_width=True)

    st.markdown("""
    A an√°lise de sazonalidade revela padr√µes mensais que persistem apesar da alta
    volatilidade do mercado:
    
    ‚óè Inverno no Hemisf√©rio Norte (novembro-fevereiro): Tend√™ncia de pre√ßos
    mais altos devido √† maior demanda para aquecimento, que complementa
    o consumo regular para transporte e outros usos.
    
    ‚óè Ver√£o no Hemisf√©rio Norte (junho-agosto): Leve aumento de pre√ßos
    associado √† temporada de viagens, quando aumenta o consumo de
    combust√≠veis para transporte.
    
    ‚óè Transi√ß√µes sazonais (mar√ßo-abril e setembro-outubro): Per√≠odos de
    relativa fraqueza de pre√ßos, quando a demanda sazonal diminui.
    
    A an√°lise boxplot mostra tamb√©m a alta variabilidade dentro de cada m√™s,
    indicando que fatores fundamentais e geopol√≠ticos frequentemente superam os
    padr√µes sazonais.
    """)

with tab2:
    st.header("Volatilidade do pre√ßo do petr√≥leo Brent")
    c1, c2 = st.columns(2)
    with c1:
        fig = go.Figure()
        fig.add_trace(go.Scatter(
            x=df.index,
            y=df['volatility_30d'],
            mode='lines',
            name='30-Day Volatility',
            line=dict(color='#E74C3C')
        ))
        
        fig.update_layout(
            title="Desvio padr√£o m√≥vel de 30 dias",
            xaxis_title="Data",
            yaxis_title="Volatilidade",
            template="plotly_white"
        )
        st.plotly_chart(fig, use_container_width=True)
        st.markdown("""
        O gr√°fico de volatilidade revela per√≠odos de maior incerteza e instabilidade no
        mercado:
        
        ‚óè 2022: O ano com maior volatilidade m√©dia da s√©rie hist√≥rica, impulsionado
        pela Invas√£o da Ucr√¢nia e subsequentes san√ß√µes ocidentais ao petr√≥leo
        russo, al√©m da interven√ß√£o dos EUA com a Libera√ß√£o de Reservas
        Estrat√©gicas tentando conter a alta de pre√ßos.
        
        ‚óè 2020: Segundo ano mais vol√°til, dominado pelo choque da Pandemia
        COVID-19 e pela Guerra de Pre√ßos entre Ar√°bia Saudita e R√∫ssia,
        resultando em uma combina√ß√£o catastr√≥fica de colapso de demanda e
        aumento de oferta.
        
        ‚óè 2011-2012: Pico de volatilidade associado √† Primavera √Årabe e interrup√ß√µes
        de fornecimento na L√≠bia, S√≠ria e outros pa√≠ses produtores da regi√£o.
        
        ‚óè 2014-2016: Alta volatilidade durante o colapso de pre√ßos provocado pela
        estrat√©gia da OPEP de n√£o cortar produ√ß√£o e pelo excesso de oferta
        global.
        
        A an√°lise deste gr√°fico mostra claramente que os choques geopol√≠ticos e as
        mudan√ßas abruptas de pol√≠tica dos principais produtores s√£o os maiores
        causadores de volatilidade no mercado petrol√≠fero.
        """)
    with c2:
        def identify_market_phases(series, threshold=0.2):
          bull_markets = []
          bear_markets = []
          
          # Initialize variables
          in_bull = False
          in_bear = False
          start_idx = 0
          peak = series.iloc[0]
          trough = series.iloc[0]
          
          for i in range(1, len(series)):
              current_price = series.iloc[i]
              
              # Check for bull market
              if not in_bull and current_price >= trough * (1 + threshold):
                  if in_bear:
                      # End of bear market
                      bear_markets.append((start_idx, i-1, series.index[start_idx], series.index[i-1], 
                                            peak, trough, (trough - peak) / peak))
                      in_bear = False
                  
                  # Start of bull market
                  in_bull = True
                  start_idx = i
                  trough = current_price
              
              # Check for bear market
              elif not in_bear and current_price <= peak * (1 - threshold):
                  if in_bull:
                      # End of bull market
                      bull_markets.append((start_idx, i-1, series.index[start_idx], series.index[i-1], 
                                          trough, peak, (peak - trough) / trough))
                      in_bull = False
                  
                  # Start of bear market
                  in_bear = True
                  start_idx = i
                  peak = current_price
              
              # Update peak and trough
              if in_bull and current_price > peak:
                  peak = current_price
              elif in_bear and current_price < trough:
                  trough = current_price
          
          # Handle the last phase
          if in_bull:
              bull_markets.append((start_idx, len(series)-1, series.index[start_idx], series.index[-1], 
                                  trough, peak, (peak - trough) / trough))
          elif in_bear:
              bear_markets.append((start_idx, len(series)-1, series.index[start_idx], series.index[-1], 
                                  peak, trough, (trough - peak) / peak))
          
          return bull_markets, bear_markets
            
        # Use monthly average for market phase identification to reduce noise
        bull_markets, bear_markets = identify_market_phases(monthly_avg, threshold=0.2)
        
        # Criando gr√°fico com Plotly
        fig = go.Figure()
        
        # Linha do pre√ßo
        fig.add_trace(go.Scatter(x=monthly_avg.index, y=monthly_avg.values,
                                 mode='lines', name='Pre√ßo M√©dio Mensal', line=dict(color='gray')))
        
        # Regi√µes de Bull Markets (verde)
        for start_idx, end_idx, start_date, end_date, *_ in bull_markets:
            fig.add_vrect(x0=start_date, x1=end_date, fillcolor="green", opacity=0.2,
                          line_width=0, annotation_text="Alta", annotation_position="top left")
        
        # Regi√µes de Bear Markets (vermelho)
        for start_idx, end_idx, start_date, end_date, *_ in bear_markets:
            fig.add_vrect(x0=start_date, x1=end_date, fillcolor="red", opacity=0.2,
                          line_width=0, annotation_text="Baixa", annotation_position="top left")
        
        # Layout
        fig.update_layout(
            title="Ciclos de Alta (verde) e Baixa (vermelho) - Pre√ßo do Petr√≥leo Brent",
            xaxis_title="Data",
            yaxis_title="Pre√ßo (USD)",
            hovermode="x unified",
            xaxis=dict(showgrid=True),
            yaxis=dict(showgrid=True),
            template="plotly_white"
        )
        st.plotly_chart(fig, use_container_width=True)

        st.markdown("""
        Este gr√°fico identifica per√≠odos distintos de mercados em alta (verde) e baixa
        (vermelho), definidos como movimentos de pelo menos 20% nos pre√ßos:
        
        ‚óè Ciclo de Alta 2020-2022: O mais expressivo da s√©rie (+183,8%), indo de
        43,24 dolares em julho de 2020 a 122,71 dolares em agosto de 2022. 
        Este aumento foi impulsionado pela combina√ß√£o de recupera√ß√£o da
        demanda p√≥s-pandemia, cortes de produ√ß√£o da OPEP+ e o choque da
        invas√£o da Ucr√¢nia.
        
        ‚óè Ciclo de Baixa 2020: A queda mais acentuada e r√°pida (-66,8%), ocorrida
        entre fevereiro e abril de 2020, quando a Pandemia COVID-19 e a Guerra
        de Pre√ßos causaram disrup√ß√£o sem precedentes.
        
        ‚óè Ciclo de Alta 2016-2018: Um per√≠odo prolongado de recupera√ß√£o (+75,0%)
        que durou 30 meses, come√ßando ap√≥s o acordo hist√≥rico da OPEP+ e
        sustentado pelo crescimento econ√¥mico global sincronizado.
        
        ‚óè Ciclo de Baixa 2014-2016: Duas quedas consecutivas e severas (-44,6% e
        -49,2%) durante um per√≠odo de 14 meses, quando o mercado ajustou-se
        ao excesso de oferta do xisto americano e √† decis√£o da OPEP de priorizar
        a participa√ß√£o de mercado sobre pre√ßos.
        
        Este gr√°fico demonstra como os ciclos de petr√≥leo tendem a ser assim√©tricos: as
        quedas geralmente s√£o mais r√°pidas e acentuadas do que as recupera√ß√µes, que
        costumam ser mais graduais.
        """)
with tab:
    # Carregando eventos importantes e insights
    def get_events_insights():
        """Retorna eventos importantes e seus insights"""
        return {
            'covid': {
                'title': 'Pandemia de COVID-19 (2020)',
                'date': '2020-03-11',
                'event_end': '2020-06-01',
                'description': '''
                A pandemia de COVID-19 causou o maior choque de pre√ßo observado nos dados recentes, com queda de 66,8% entre fevereiro e abril de 2020.
                
                **Causas principais:**
                - Lockdowns globais reduziram drasticamente a demanda por transporte
                - Guerra de pre√ßos entre R√∫ssia e Ar√°bia Saudita agravou a situa√ß√£o
                - Capacidade de armazenamento global chegou pr√≥xima ao limite
                
                Em 22 de abril de 2020, vimos uma varia√ß√£o di√°ria extraordin√°ria de +51%, refletindo a extrema volatilidade do mercado.
                A queda nos pre√ßos levou o petr√≥leo WTI americano a registrar pre√ßos negativos pela primeira vez na hist√≥ria.
                ''',
                'date_range': ['2020-01-01', '2020-07-31']
            },
            'recovery': {
                'title': 'Recupera√ß√£o P√≥s-Pandemia (2020-2022)',
                'date': '2020-07-31',
                'event_end': '2022-08-31',
                'description': '''
                A mais expressiva alta identificada na s√©rie hist√≥rica ocorreu entre julho de 2020 e agosto de 2022, com valoriza√ß√£o de 183,8%.
                
                **Fatores de impulso:**
                - Reabertura das economias globais
                - Cortes de produ√ß√£o coordenados pela OPEP+
                - Retomada da demanda enquanto a oferta permanecia restrita
                - Tens√µes geopol√≠ticas crescentes
                
                Este per√≠odo demonstrou como os pre√ßos do petr√≥leo podem se recuperar rapidamente ap√≥s um choque, especialmente quando h√° a√ß√£o coordenada entre os principais produtores.
                ''',
                'date_range': ['2020-07-01', '2022-08-31']
            },
            'crisis2014': {
                'title': 'Crise Financeira de 2014-2016',
                'date': '2014-11-27',
                'event_end': '2016-02-29',
                'description': '''
                Entre outubro de 2014 e fevereiro de 2016, o pre√ßo do petr√≥leo sofreu uma queda prolongada e significativa, com duas fases distintas:
                - Primeira queda de 44,6% (out/2014 a abr/2015)
                - Segunda queda de 49,2% (jun/2015 a fev/2016)
                
                **Este per√≠odo foi marcado por:**
                - Excesso de oferta devido ao boom do xisto nos EUA
                - Desacelera√ß√£o da economia chinesa
                - Decis√£o da OPEP de n√£o reduzir a produ√ß√£o para defender participa√ß√£o de mercado
                - Levantamento das san√ß√µes contra o Ir√£, aumentando a oferta global
                
                A queda prolongada levou a grandes cortes de investimentos em explora√ß√£o e produ√ß√£o, configurando as bases para a recupera√ß√£o dos pre√ßos nos anos seguintes.
                ''',
                'date_range': ['2014-10-01', '2016-03-31']
            },
            'ukraine': {
                'title': 'Guerra Russo-Ucraniana (2022)',
                'date': '2022-02-24',
                'event_end': '2022-06-30',
                'description': '''
                O ano de 2022 apresentou a maior volatilidade da s√©rie hist√≥rica. A invas√£o da Ucr√¢nia pela R√∫ssia em fevereiro de 2022 impulsionou o pre√ßo do petr√≥leo a m√°ximas pr√≥ximas de $130.
                
                **Fatores que impactaram o mercado:**
                - Temores de san√ß√µes aos suprimentos russos (segundo maior exportador mundial)
                - Preocupa√ß√µes com a seguran√ßa energ√©tica europeia
                - Interrup√ß√µes na infraestrutura de transporte no Mar Negro
                
                Em resposta √† alta, os EUA anunciaram em mar√ßo a maior libera√ß√£o de reservas estrat√©gicas da hist√≥ria, liberando 180 milh√µes de barris para tentar conter os pre√ßos.
                ''',
                'date_range': ['2022-01-01', '2022-08-31']
            },
            'arab_spring': {
                'title': 'Primavera √Årabe (2011)',
                'date': '2011-03-15',
                'event_end': '2011-08-31',
                'description': '''
                Em 2011, identificamos um per√≠odo de alta volatilidade e pre√ßos elevados, com o petr√≥leo alcan√ßando $126,64 em maio de 2011. 
                
                **Fatores de impacto:**
                - Revoltas pol√≠ticas no Oriente M√©dio e Norte da √Åfrica (Primavera √Årabe)
                - Interrup√ß√£o da produ√ß√£o l√≠bia (perda de aproximadamente 1,6 milh√£o de barris por dia)
                - Temores de cont√°gio da instabilidade para outros produtores importantes da regi√£o
                
                Este evento demonstrou como instabilidade pol√≠tica em regi√µes produtoras chave pode rapidamente elevar os pre√ßos, mesmo sem grande interrup√ß√£o da oferta global.
                ''',
                'date_range': ['2011-01-01', '2011-12-31']
            },
            'energy_transition': {
                'title': 'Transi√ß√£o Energ√©tica e Padr√µes Sazonais',
                'date': '',
                'event_end': '',
                'description': '''
                A an√°lise dos dados revela que a volatilidade do petr√≥leo est√° aumentando nas √∫ltimas d√©cadas, apesar de per√≠odos de relativa estabilidade.
                
                **Fatores relevantes:**
                - Mudan√ßa gradual para energias renov√°veis alterando o balan√ßo tradicional de oferta e demanda
                - Crescente papel de eventos clim√°ticos extremos na determina√ß√£o dos pre√ßos
                - Padr√£o sazonal moderado, com pre√ßos geralmente mais altos no inverno do hemisf√©rio norte e queda na primavera
                
                A transi√ß√£o energ√©tica global est√° criando um novo paradigma para o mercado de petr√≥leo, com investimentos reduzidos em novos projetos e maior incerteza sobre a demanda futura.
                ''',
                'date_range': ['2010-01-01', '2025-05-02']
            }
        }

    def ensure_datetime_scalar(value):
        """Converte datas para um datetime.datetime escalar seguro para uso no Plotly"""
        value = pd.to_datetime(value)
        if isinstance(value, (pd.Series, pd.Index)):
            value = value[0]  # ou .iloc[0] se for Series
        return value.to_pydatetime() if hasattr(value, 'to_pydatetime') else value
    
    # Carregando eventos
    events_insights = get_events_insights()
    
    # T√≠tulo da p√°gina
    st.header("üîç Insights Geopol√≠ticos e Econ√¥micos")
    st.markdown("""
    Explore os principais eventos que impactaram o mercado de petr√≥leo e compreenda as conex√µes
    entre situa√ß√µes geopol√≠ticas, crises econ√¥micas e a din√¢mica de pre√ßos do petr√≥leo Brent.
    """)
    
    # Sele√ß√£o de insights
    st.subheader("Selecione um evento para an√°lise detalhada")
    
    # Criando uma vis√£o geral dos eventos em linha do tempo
    fig = go.Figure()
    
    # Adicionando linha para o pre√ßo
    fig.add_trace(go.Scatter(
        x=df.index,
        y=df['petrol_price'],
        mode='lines',
        name='Pre√ßo Brent',
        line=dict(color='royalblue', width=2)
    ))
    
    # Adicionando marcadores para eventos importantes
    for key, event in events_insights.items():
        if event['date']:  # Verifica se h√° uma data espec√≠fica
            event_date = pd.to_datetime(event['date'])
            if event_date in df.index or (event_date >= df.index[0] and event_date <= df.index[-1]):
                # Encontrar valor mais pr√≥ximo
                closest_idx = df.index.get_indexer([event_date], method='nearest')[0]
                price = df['petrol_price'].iloc[closest_idx]
                
                fig.add_trace(go.Scatter(
                    x=[event_date],
                    y=[price],
                    mode='markers+text',
                    name=event['title'],
                    text=[event['title']],
                    textposition="top center",
                    marker=dict(size=12, symbol='circle', color='red'),
                    textfont=dict(size=10),
                    hoverinfo='text',
                    hovertext=event['title']
                ))
    
    # Formatando o gr√°fico
    fig.update_layout(
        title="Linha do Tempo de Eventos Importantes no Mercado de Petr√≥leo",
        xaxis_title="Data",
        yaxis_title="Pre√ßo (USD)",
        height=400,
        hovermode="x unified",
        legend=dict(orientation="h", yanchor="bottom", y=1.02, xanchor="right", x=1)
    )
    
    st.plotly_chart(fig, use_container_width=True)
    
    # Criando um seletor de eventos
    event_options = list(events_insights.keys())
    event_titles = [events_insights[key]['title'] for key in event_options]
    selected_event_title = st.selectbox("Escolha um evento para an√°lise detalhada:", event_titles)
    
    # Encontrando o evento selecionado
    selected_event_key = event_options[event_titles.index(selected_event_title)]
    selected_event = events_insights[selected_event_key]
    
    # Exibindo detalhes do evento selecionado
    st.header(selected_event['title'])
    st.markdown(selected_event['description'])
    
    # Filtrando dados para o per√≠odo do evento
    if selected_event['date_range']:
        start_date = pd.to_datetime(selected_event['date_range'][0])
        end_date = pd.to_datetime(selected_event['date_range'][1])
        event_df = df.loc[(df.index >= start_date) & (df.index <= end_date)]
        
        # Gr√°fico detalhado do per√≠odo do evento
        fig = go.Figure()
        
        # Adicionando linha para o pre√ßo
        fig.add_trace(go.Scatter(
            x=event_df.index,
            y=event_df['petrol_price'],
            mode='lines',
            name='Pre√ßo Brent',
            line=dict(color='royalblue', width=2)
        ))
        
        # Destacando data do evento se existir
        if selected_event['date']:
            event_date = ensure_datetime_scalar(selected_event['date'])
            if selected_event['event_end']:
                event_end_date = ensure_datetime_scalar(selected_event['event_end'])
                fig.add_vrect(
                    x0=event_date,
                    x1=event_end_date,
                    fillcolor="LightSalmon",
                    opacity=0.3,
                    layer="below",
                    line_width=0,
                    annotation_text=selected_event['title'],
                    annotation_position="top left"
                )
            else:
                fig.add_vrect(
                    x0=event_date,
                    x1=event_date + timedelta(days = 2),
                    fillcolor="LightSalmon",
                    opacity=0.3,
                    layer="below",
                    line_width=0,
                    annotation_text=selected_event['title'],
                    annotation_position="top left"
                )
        
        # Formatando o gr√°fico
        fig.update_layout(
            title=f"Impacto do Evento: {selected_event['title']}",
            xaxis_title="Data",
            yaxis_title="Pre√ßo (USD)",
            height=500,
            hovermode="x unified"
        )
        
        st.plotly_chart(fig, use_container_width=True)
        
        # Estat√≠sticas relevantes
        with st.expander("Estat√≠sticas do Per√≠odo"):
            col1, col2, col3, col4 = st.columns(4)
            
            # Calculando varia√ß√£o no per√≠odo
            start_price = event_df['petrol_price'].iloc[0]
            end_price = event_df['petrol_price'].iloc[-1]
            price_change = end_price - start_price
            pct_change = (price_change / start_price) * 100
            
            with col1:
                st.metric("Pre√ßo Inicial", f"US$ {start_price:.2f}")
            
            with col2:
                st.metric("Pre√ßo Final", f"US$ {end_price:.2f}", f"{pct_change:.2f}%")
            
            with col3:
                st.metric("Pre√ßo M√°ximo", f"US$ {event_df['petrol_price'].max():.2f}")
            
            with col4:
                st.metric("Volatilidade", f"{event_df['volatility_30d'].mean():.2f}")
            
            # Exibindo dias com maior varia√ß√£o
            st.subheader("Dias com Maior Varia√ß√£o")
            top_changes = event_df.sort_values(by='price_pct_change', ascending=False).head(5)
            
            if not top_changes.empty:
                # Criando DataFrame para exibi√ß√£o
                display_df = pd.DataFrame({
                    'Data': top_changes.index,
                    'Pre√ßo (USD)': top_changes['petrol_price'].round(2),
                    'Varia√ß√£o (USD)': top_changes['price_change'].round(2),
                    'Varia√ß√£o (%)': top_changes['price_pct_change'].round(2)
                })
                
                st.dataframe(display_df, use_container_width=True)
    
    # Insights adicionais baseados na an√°lise completa
    st.header("Conclus√µes e An√°lises Adicionais")
    
    # M√©dia anual com anota√ß√µes
    st.subheader("M√©dia Anual de Pre√ßos (2010-2025)")
    
    # Calculando m√©dias anuais
    yearly_avg = df.resample('Y')['petrol_price'].mean()
    yearly_volatility = df.resample('Y')['volatility_30d'].mean()
    
    # Criando DataFrame para visualiza√ß√£o
    yearly_df = pd.DataFrame({
        'Ano': yearly_avg.index.year,
        'Pre√ßo M√©dio': yearly_avg.values,
        'Volatilidade M√©dia': yearly_volatility.values
    })
    
    # Gr√°fico de barras para m√©dias anuais
    fig = go.Figure()
    
    # Adicionando barras para pre√ßos m√©dios
    fig.add_trace(go.Bar(
        x=yearly_df['Ano'],
        y=yearly_df['Pre√ßo M√©dio'],
        name='Pre√ßo M√©dio',
        marker_color='royalblue'
    ))
    
    # Adicionando linha para volatilidade
    fig.add_trace(go.Scatter(
        x=yearly_df['Ano'],
        y=yearly_df['Volatilidade M√©dia'],
        mode='lines+markers',
        name='Volatilidade',
        yaxis='y2',
        line=dict(color='firebrick', width=2)
    ))
    
    # Atualizando layout para eixo duplo
    fig.update_layout(
        title="Pre√ßo M√©dio e Volatilidade Anual do Petr√≥leo Brent",
        xaxis_title="Ano",
        yaxis_title="Pre√ßo M√©dio (USD)",
        yaxis2=dict(
            title="Volatilidade",
            overlaying="y",
            side="right"
        ),
        height=500,
        legend=dict(orientation="h", yanchor="bottom", y=1.02, xanchor="right", x=1),
        barmode='group'
    )
    
    st.plotly_chart(fig, use_container_width=True)
    
    # Correla√ß√£o com eventos econ√¥micos mundiais
    st.subheader("Correla√ß√£o com Eventos Econ√¥micos Mundiais")
    
    st.info("""
    **Observa√ß√µes importantes sobre a correla√ß√£o de pre√ßos do petr√≥leo com eventos globais:**
    
    1. **Crises Financeiras**: Grandes crises financeiras, como a de 2008 (anterior ao nosso dataset) e o in√≠cio da pandemia em 2020, geralmente levam a quedas acentuadas nos pre√ßos devido √† redu√ß√£o da atividade econ√¥mica global.
    
    2. **Tens√µes Geopol√≠ticas**: Conflitos em regi√µes produtoras (como Oriente M√©dio) ou envolvendo grandes produtores (como a R√∫ssia) tendem a elevar os pre√ßos rapidamente devido ao risco de interrup√ß√£o de fornecimento.
    
    3. **Decis√µes da OPEP+**: As decis√µes do cartel continuam sendo o fator individual mais importante para tend√™ncias de pre√ßos de m√©dio prazo, como visto nas decis√µes de 2014, 2016 e 2020.
    
    4. **Ciclos Econ√¥micos**: Os pre√ßos do petr√≥leo tendem a seguir ciclos econ√¥micos globais, com per√≠odos de crescimento econ√¥mico sincronizado levando a aumentos de pre√ßos (como em 2017-2019 e 2021-2022).
    
    5. **Transi√ß√£o Energ√©tica**: O avan√ßo das energias renov√°veis e pol√≠ticas de descarboniza√ß√£o est√£o come√ßando a influenciar as perspectivas de longo prazo para os pre√ßos do petr√≥leo, potencialmente limitando picos de pre√ßo sustentados.
    """)
    
    # Conclus√£o
    st.header("Conclus√£o")
    
    st.success("""
    A an√°lise hist√≥rica dos pre√ßos do petr√≥leo Brent revela um mercado extremamente sens√≠vel a eventos geopol√≠ticos, decis√µes de grandes produtores e mudan√ßas macroecon√¥micas globais. Os principais insights obtidos s√£o:
    
    1. O petr√≥leo continua sendo uma commodity estrat√©gica cujo pre√ßo reflete tens√µes geopol√≠ticas globais
    2. A volatilidade do mercado tem aumentado nos √∫ltimos anos, com eventos extremos tornando-se mais frequentes
    3. Existe uma correla√ß√£o clara entre decis√µes coordenadas de produ√ß√£o (OPEP+) e tend√™ncias de pre√ßos de m√©dio prazo
    4. Grandes crises globais (como a pandemia) podem causar disrup√ß√µes sem precedentes no equil√≠brio de oferta e demanda
    5. O mercado apresenta uma capacidade not√°vel de recupera√ß√£o ap√≥s choques, como visto na recupera√ß√£o p√≥s-pandemia
    6. A transi√ß√£o energ√©tica est√° come√ßando a introduzir novos fatores estruturais que moldar√£o o mercado nas pr√≥ximas d√©cadas
    
    Estes insights s√£o valiosos para investidores, formuladores de pol√≠ticas e empresas do setor de energia que precisam navegar um ambiente cada vez mais complexo e vol√°til.
    """)

with tab3:
    st.header("Previs√£o do Pre√ßo do Petr√≥leo Brent")
    @st.cache_resource
    def load_model():
        return joblib.load('prophet_model_v2.pkl')    
    model = load_model()
    
    # Gerar previs√£o
    future_dates = model.make_future_dataframe(periods=90)
    forecast = model.predict(future_dates)
    
    next_dt = (datetime.now() +  timedelta(days=1)) 
    df_price = df['2025-05-01':]
    start_dt = pd.to_datetime("2025-05-01")
    forecast = (forecast[['ds', 'yhat', 'yhat_lower', 'yhat_upper']]
                .set_index('ds')
               )
    forecast.index = pd.to_datetime(forecast.index)

    forecast = (forecast
                .loc[(forecast.index >= start_dt) & (forecast.index <= next_dt)]
                .reset_index()
               )
    #Metrics cards
    next_day_price = forecast['yhat'].iloc[-1]
    rmse = 4.355010
    mae = 3.512644
    cl1, cl2, cl3 = st.columns(3)
    cl1.metric(f"Previs√£o do dia {next_dt.strftime('%d-%m-%Y')}", f"US$ {next_day_price:.2f}")
    cl2.metric("Erro quadr√°tico m√©dio (RMSE)", f"US$ {rmse:.2f}")
    cl3.metric("Erro m√©dio absoluto (MAE)", f"US$ {mae:.2f}")
    
    # Exibir resultado
    days = st.number_input("Quantos dias para prever?", min_value=1, max_value=15, value=7)
    future_dt = (datetime.now() +  timedelta(days=days)).strftime('%Y-%m-%d')
    df_to_display = forecast[['ds', 'yhat']].set_index("ds").sort_index()[:f"{future_dt}"].tail(days)
    st.write("Previs√£o do pre√ßo em US$ para os pr√≥ximos {} dias:".format(days))
    st.dataframe(df_to_display.rename(columns={'ds': 'data', 'yhat':'pre√ßo predito'}))
    
    # Plotar previs√£o
    fig = go.Figure()
    fig.add_trace(go.Scatter(x=df_price.index, y=df_price['petrol_price'], mode='lines', name='Hist√≥rico'))
    fig.add_trace(go.Scatter(x=forecast['ds'], y=forecast['yhat'], mode='lines', name='Previs√£o'))
    fig.add_trace(go.Scatter(x=forecast['ds'], y=forecast['yhat_upper'], mode='lines', name='Limite superior', line=dict(dash='dot'), opacity=0.3))
    fig.add_trace(go.Scatter(x=forecast['ds'], y=forecast['yhat_lower'], mode='lines', name='Limite inferior', line=dict(dash='dot'), opacity=0.3))
    
    fig.update_layout(title="Previs√£o do modelo vs Hist√≥rico", xaxis_title="Data", yaxis_title="Pre√ßo($)", template="plotly_white")
    st.plotly_chart(fig, use_container_width=True)
    
    with st.expander("Sobre o Modelo"):
        st.write("""
        O modelo utilizado para previs√£o √© o **Prophet**, desenvolvido pela Facebook (atual Meta) para lidar com s√©ries temporais com sazonalidades fortes e tend√™ncias n√£o lineares.
    
        Este modelo √© particularmente indicado para o pre√ßo do petr√≥leo por sua capacidade de:
        - Capturar tend√™ncias de longo prazo com suavidade
        - Considerar sazonalidades di√°rias, semanais e anuais
        - Lidar bem com feriados e eventos at√≠picos (caso adicionados)
        
        As m√©tricas de performance do modelo incluem:
        - MAE (Mean Absolute Error): Aproximadamente 3,51
        - RMSE (Root Mean Square Error): Aproximadamente 4,36
    
        O modelo √© reestimado periodicamente para refletir as atualiza√ß√µes mais recentes da s√©rie hist√≥rica.
        """)
    

# Add footer
st.markdown("---")
st.markdown("Data source: Yahoo Finance (BZ=F)") 
